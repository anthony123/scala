{"name":"A new backend and optimizer for scalac","tagline":"Faster compilation, faster runs","body":"# Why a new optimizer\r\n\r\n> Aren't _upcoming-silver-bullet_ going to give us top performance, without any effort from our part?\r\n\r\nThe experimental optimizer instead:\r\n* explores what can be made today to improve performance (you know, just in case method handles in JDK 7 remain slow and buggy, for lack of backporting LambdaForm fixes from JDK 8).\r\n* while leaving a door open to future developments (closures are converted in a manner amenable to a future MethodHandle implementation).\r\n* consisting of many focused, individually simple, transformations; that are combined to implement bytecode-level refactorings, using ASM http://asm.ow2.org/\r\n\r\n### And a faster code emitter, too\r\n\r\nBefore the new optimizer runs (`GenBCodeOpt`), a bytecode emitter (`GenBCode`) turns Abstract Syntax Trees directly into ASM Trees, outperforming by 30% its existing counterpart (`GenICode + GenASM`).\r\n- the intermediate step to build Control Flow Graphs is not needed,\r\n- overlapping of class file disk writing and their construction (the more source files, the larger the speedup)\r\n\r\n\r\n\r\nA summary follows of the capabilities of the new optimizer I've been working on.\r\n\r\n# Features\r\n\r\n## Inlining\r\n\r\nThe inliner currently used in scalac has a few problems:\r\n\r\n* closure elimination is implemented as repeated method inlinings. Upon being forced to stop doing that (e.g., recursive method) none of the previous inlinings is undone, leaving both the closure class and a trail of duplicate code.\r\n* code may be inlined from third-party libraries or the JDK. In general methods not marked `@inline` may be inlined as discussed in thread [the perils of inlining](https://groups.google.com/d/topic/scala-internals/uyFWFRbUD0o/discussion) \r\n* invocation cycles (ie M1() calling M2() calling M1() etc) are \"broken\" only after hitting the maximum method size threshold, leaving a trail of duplicate code behind.\r\n\r\nInstead, the experimental optimizer just follows a simple principle:\r\n\r\n> only inline @inline-marked methods, and always inline them, including under separate-compilation\r\n\r\nThus the new inliner is deterministic, not dependent on heuristics about method sizes or similar. The only additional requirement (if you will) is that the method to dispatch (the one marked `@inline`) can be found via the static type of the receiver, e.g. in a `Range.foreach()` callsite the type of the receiver must be `Range` or subtype (in general, not a super type where the `@inline` method is defined). After all, inlining is a conscious decision: making that explicit via the type of the receiver is straightforward. As a result, the `@noinline` annotation doesn't play a role anymore.\r\n\r\nThe new optimizer provides detailed logging about performed inlinings, as well as diagnostics when inlining proves unfeasible (down to the culprit bytecode instructions). With that, fixing the causes of non-inlining takes way less effort, as the following shows.\r\n\r\nLog example:\r\n\r\n    [log jvm] Successful closure-inlining (albeit null receiver couldn't be ruled out). Callsite: \r\n      scala/tools/nsc/Global.exitingTyper(Lscala/Function0;)Ljava/lang/Object;\r\n    occurring in method\r\n      scala/tools/nsc/interpreter/JLineCompletion$CompilerCompletion$class::memberNamed(Lscala/tools/nsc/interpreter/JLineCompletion$CompilerCompletion;Ljava/lang/String;)Lscala/reflect/internal/Symbols$Symbol;\r\n\r\n\r\nWarning example:\r\n\r\n    SpecializeTypes.scala:1166: warning: Closure-inlining failed because\r\n      scala/collection/immutable/List::mapConserve(Lscala/Function1;)Lscala/collection/immutable/List;\r\n    contains instruction \r\n      INVOKESPECIAL scala/collection/immutable/List.loop$1 (Lscala/collection/mutable/ListBuffer;Lscala/collection/immutable/List;Lscala/collection/immutable/List;Lscala/Function1;)Lscala/collection/immutable/List;\r\n    that would cause IllegalAccessError from class scala/tools/nsc/transform/SpecializeTypes\r\n            val parents1 = parents mapConserve specializedType\r\n                                   ^\r\n\r\nThinking about the warning above, it makes sense: loop() is a local method:\r\n\r\n```scala\r\n// scala.collection.immutable.List\r\n  @inline final def mapConserve[B >: A <: AnyRef](f: A => B): List[B] = {\r\n    @tailrec\r\n    def loop(mapped: ListBuffer[B], unchanged: List[A], pending: List[A]): List[B] =\r\n       ...\r\n```\r\n\r\n\r\n## Fewer closure allocations: Singleton closures, Closure recycling\r\n\r\nSome anonymous closures depend only on `apply()` arguments, for example the char filter function:\r\n\r\n```scala\r\n  def deeplyNestedMethod(str: String) = {\r\n    str filter { (char: Char) => (char >= 'a' && char <= 'f') || (char >= 'A' && char <= 'F') || (char >= '0' && char <= '9') }\r\n  }\r\n```\r\n\r\nIn these cases, the new optimizer avoids repeated allocations by keeping (in a static field) a singleton-instance that is reused.\r\n\r\nClosure recycling detects when the values captured by a closure haven't changed, avoiding allocating a new closure in that case. For example:\r\n\r\n```scala\r\nobject Test {\r\n\r\n  def main(args: Array[String]) {\r\n\r\n    var sum = 0\r\n    val a   = 123\r\n    val b   = 456\r\n\r\n    var i = 0\r\n    while (i < 10) {\r\n      higherOrderMethod {\r\n        (i: Int) => { sum += i + a + b; println(sum) }\r\n      }\r\n      i += 1\r\n    }\r\n\r\n  }\r\n\r\n  def higherOrderMethod(closure: Int => Unit ) {\r\n    println(System.identityHashCode(closure))\r\n  }\r\n\r\n}\r\n```\r\n\r\nWith the current optimizer, the above results in as many closure allocations as passes through the loop. The experimental optimizer instead recycles the first closure allocation. The idea is to expand the reach of this approach to work in more cases (right now, it won't trigger when using a for loop, but that's only because a private method isn't being inlined, for now).\r\n\r\n\r\nThese features are more useful on Android (besides micro-benchmarks) where a vast RAM doesn't masquerade redundant allocations.\r\n\r\n## Supported optimizations\r\n\r\n### Intra-method optimizations\r\n\r\n* collapse a multi-jump chain to target its final destination via a single jump\r\n* remove unreachable code\r\n* remove those LabelNodes and LineNumbers that aren't in use\r\n* remove dangling exception handlers\r\n* copy propagation\r\n* dead-store elimination\r\n* Preserve side-effects, but remove those (producer, consumer) pairs where the consumer is a DROP and\r\n  the producer has its value consumed only by the DROP in question.\r\n* simplify branches that need not be taken to get to their destination.\r\n* nullness propagation\r\n* constant folding\r\n* caching repeatable reads of stable values\r\n* eliding box/unbox pairs\r\n* eliding redundant local vars\r\n* SI-6720: Uninitialized object exists on backward branch\r\n\r\n\r\n### Intra-class optimizations\r\n\r\n* those private members of a class which see no use are elided\r\n* tree-shake unused closures, minimize the fields of those remaining\r\n* minimization of closure-allocations\r\n* add caching for closure recycling\r\n* refresh the InnerClasses JVM attribute\r\n\r\n### Whole-program optimizations\r\n\r\n* method inlining\r\n* closure inlining\r\n\r\n\r\n\r\n# Evaluation\r\n\r\n## How much does it add to compilation time?\r\n\r\nThe new optimizer (except a brief whole-program component) is task-parallel:\r\n* intra-method optimizations are run in parallel for different methods;\r\n* intra-class optimizations are run parallel for different classes\r\n\r\nVisually:\r\n\r\n![experimental optimizer uses task parallelism](http://lampwww.epfl.ch/~magarcia/ScalaCompilerCornerReloaded/yk.png)\r\n\r\nThere's no reason to limit the worker pool to 8 threads, that's \"configurable\" at:\r\n\r\n```scala\r\n    val MAX_THREADS = scala.math.min(\r\n      32,\r\n      java.lang.Runtime.getRuntime.availableProcessors\r\n    )\r\n```\r\n\r\n## Emitted code size\r\n\r\nLet's take scala/scala as case study, compiling src/compiler and src/reflect together using:\r\n\r\n1. \"Old\": GenICode, the current optimizer, and GenASM.\r\n2. \"New\": GenBCode and the experimental optimizer.\r\n\r\nThe new optimizer produces smaller JAR sizes:\r\n\r\n1. `\"Old\": Total length 32'678'787, packed length 12'723'723`\r\n2. `\"New\": Total length 32'252'526, packed length 12'416'033`\r\n\r\n## Benchmarks\r\n\r\nYour input is welcome!\r\n\r\n## Speeding up scalac\r\n\r\nNo, it doesn't. That's normal: scalac is dominated by factors not optimized yet. Examples abound: \r\n* millions of `::` allocated. Neither the old nor the new optimizer are tuned to reduce that.\r\n* for deeper insights:  https://github.com/gkossakowski/scalac-aspects\r\n* actually, tools like Caliper or ScalaMeter, by themselves, tell how much faster sthg runs. When building an optimizer, it's more useful to know \"why\" stgh runs faster (specially with 20+ optimizations at play). With some work, the toolset that Grzegorz has jumpstarted can provide those insights. \r\n\r\nThe new optimizer may well make *your* code run faster. To find out, give it a try.\r\n\r\n\r\n\r\n# Getting Started\r\n\r\nThe first step is checking out branch `GenBCodeOpt` of repository https://github.com/magarciaEPFL/scala\r\n\r\nAfter `ant all.clean && ant` , the new optimizer runs by default _unless_ an option to activate the \"old\" optimizer is given ( `-optimise`, `-Yinline` , `-Yinline-handlers` , `-Yclosure-elim` , or `-Ydead-code` ). Simply stay away from those options and you'll be running the new optimizer. Diagnostics displayed via `-Ylog:jvm` . For even more details `-Ydebug -Yinline-warnings`\r\n\r\n\r\n\r\n\r\n# Future Work\r\n\r\n* [SI-4767](https://issues.scala-lang.org/browse/SI-4767) Inlining of final methods declared in traits\r\n* [SI-6941](https://issues.scala-lang.org/browse/SI-6941) Pattern matcher inefficiency for basic constructor patterns\r\n* [Late closure classes](https://groups.google.com/d/msg/scala-internals/XmiWt2kcHDY/yit5pTyDFF0J) For a smaller working set during compilation, postpone the creation of AST nodes for closure classes until bytecode generation\r\n\r\n`scala.runtim.IntRef` and friends offer opportunities to simplify code (which in itself gains no performance, but may well trigger other optimizations that do). For example, whenever there's a single left-hand-side use of a captured value, an `IntRef` is passed around all over, even to those private methods that only require read-access. \r\n\r\n```scala\r\n  def main(args: Array[String]) {\r\n    var capturedW = 0\r\n        def childR() { println(capturedW) }\r\n        def childW() { capturedW = args.size }\r\n    if (args == null) childR() else childW();\r\n  }\r\n```\r\n\r\nBytecode-level, `childR()` could receive an `Int`, or be inlined altogether. Currently:\r\n\r\n```javap\r\n    private static final void childR$1(scala.runtime.IntRef);\r\n      Code:\r\n       0:  getstatic\t#31; //Field scala/Predef$.MODULE$:Lscala/Predef$;\r\n       3:  aload_0\r\n       4:  getfield\t#35; //Field scala/runtime/IntRef.elem:I\r\n       7:  invokestatic\t#41; //Method scala/runtime/BoxesRunTime.boxToInteger:(I)Ljava/lang/Integer;\r\n       10: invokevirtual\t#45; //Method scala/Predef$.println:(Ljava/lang/Object;)V\r\n       13: return\r\n```\r\n\r\nWhat others are doing:\r\n* [Notes from the JS pit: closure optimization](http://blog.cdleary.com/2010/05/notes-from-the-js-pit-closure-optimization/)\r\n* [Runtime metaprogramming via java.lang.invoke.MethodHandle](http://lamp.epfl.ch/~magarcia/ScalaCompilerCornerReloaded/2012Q2/RuntimeMP.pdf)\r\n* [A comparison of the memory behaviour of Java and Scala programs](http://www.scalabench.org/publications.html)\r\n\r\nSuggestions for improvement need not be \"sophisticate\" to be useful :) For example, it's easy game for GenBCode to reduce:\r\n\r\n    new\t#17; //class scala/runtime/IntRef\r\n    dup\r\n    iconst_0\r\n    invokespecial\t#20; //Method scala/runtime/IntRef.\"<init>\":(I)V\r\n\r\nto just a static invocation (of a factory method added for that common case in `scala.runtime.IntRef`). And so on so forth.\r\n\r\n# Comments, benchmarks, test cases, bug reports, are welcome.\r\n\r\nPlease help us help you.\r\n\r\nMiguel Garcia\r\n[http://lampwww.epfl.ch/~magarcia](http://lampwww.epfl.ch/~magarcia)\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","google":""}